pipeline {
  agent any

  environment {
    registry = "gcr.io/jenkins-360510/python-fahrenheit-docker-0815"
    dockerImage = ''
    containerName = "python-fahrenheit-docker"
    internalIPVM = "10.128.0.14"
    externalIPVM = "35.226.95.12"
  }

  stages {

    stage('Build image') {
      steps{
        script {
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
        }
      }
    }

    stage('Push Docker Image to GCR') {
      steps{
        script {
          withDockerRegistry(credentialsId: 'gcr:jenkins-360510', url: 'https://gcr.io/')
          {
            dockerImage.push()
          }
        }
      }
    }


    stage('Check running container') {
      steps {
         sh '''
            if [ $(ssh mich_nae65_gmail_com@${internalIPVM} "docker ps -qa -f name=${containerName}") ]
            then
                echo "container exists."
                if [ $(ssh mich_nae65_gmail_com@${internalIPVM} "docker ps -q -f name=${containerName}") ]
                then
                echo "stop container!"
                ssh mich_nae65_gmail_com@${internalIPVM} "docker stop -t 20 ${containerName}"
                ssh mich_nae65_gmail_com@${internalIPVM} "sleep 10"

                fi
                echo "Remove container"
                ssh mich_nae65_gmail_com@${internalIPVM} "docker rm -f ${containerName}"
                ssh mich_nae65_gmail_com@${internalIPVM} "sleep 10"

            fi
            '''
      }
    }

    stage('deploy to VM') {
      steps {
        sh 'ssh mich_nae65_gmail_com@${internalIPVM} "docker run -d -p 5000:5000 --name ${containerName} gcr.io/jenkins-360510/python-fahrenheit-docker-0815:$BUILD_NUMBER"'
        sleep 10
     }
   }

   stage("curl-test internal VM IP") {
       steps {
            script {
             final String interne_url = "http://${internalIPVM}:5000"

             final def (String response, int code) =
               sh(script: "curl -s -o /dev/null -w '%{http_code}' $interne_url")

               echo "Interner Test: HTTP response status code: $code"

              if (code == 200) {
                echo response
              }
            }
        }
    }

     stage("Curl-Test external VM IP") {
       steps {
            script {
             final String public_url = "http://${externalIPVM}:5000"

             final def (String response, int code) =
               sh(script: "curl -s -o /dev/null -I -w '%{response_code}' $public_url")

               echo "External Test: HTTP response status code: $code"

              if (code == 200) {
                echo response
              }
            }
        }
    }


  }
}

